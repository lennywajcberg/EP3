import pygame
import random

# Inicializar Pygame
pygame.init()
# Importando imagens 
imagem_fundo = pygame.transform.scale(pygame.image.load('imagens/fundo_jogo.png'), size = (800,600))
imagem_over = pygame.transform.scale(pygame.image.load('imagens/fundo_over.png'), size = (800,600))
imagem_inicio = pygame.transform.scale(pygame.image.load('imagens/fundo_inicio.png'), size = (800,600))
imagem_player = pygame.transform.scale(pygame.image.load('imagens/player.png'), size = (60,60))
imagem_pause = pygame.transform.scale(pygame.image.load('imagens/fundo_pause.png'), size = (800,600))
# Carrega os sons do jogo
pygame.mixer.music.load('sons/jogo.mp3')
pygame.mixer.music.set_volume(0.2)
som_jogo = pygame.mixer.Sound('sons/jogo.mp3')
som_jogo.set_volume(0.05)
som_morte = pygame.mixer.Sound('sons/morto.mp3')
som_morte.set_volume(0.5)
som_transicao = pygame.mixer.Sound('sons/transicao.mp3')
som_transicao.set_volume(0.3)
som_inicio = pygame.mixer.Sound('sons/inicio.mp3')
som_inicio.set_volume(0.01)
som_asa = pygame.mixer.Sound('sons/asa.mp3')
som_asa.set_volume(0.3)
som_clique = pygame.mixer.Sound('sons/som_click.mp3')
som_clique.set_volume(0.3)
som_velo = pygame.mixer.Sound('sons/velocidade.mp3')
som_velo.set_volume(0.3)
# Definições de cores
BRANCO = (255, 255, 255)
VERDE = (0, 255, 50)
AZUL = (0, 0, 255)
VERMELHO = (255, 0, 0)
# Configurações da tela
LARGURA, ALTURA = 800, 600
tela = pygame.display.set_mode((LARGURA, ALTURA))
pygame.display.set_caption("Flappy Bird")
FPS = 30
pause = False
inicio = False
restart_cmd = False
superficie = pygame.Surface((LARGURA, ALTURA), pygame.SRCALPHA)
# Contador sons
cont_morte = 0
# Configurações do pássaro
pos_x = 50
pos_y = 300
velocidade_y = 0
gravidade = 1
pulo = -13
# Configurações dos canos
distancia_canos = 400
altura_canos = 200
velocidade_canos = 5
canos = []
cont_canos = 0
# Pontuação
pontuacao = 0
fonte = pygame.font.Font(None, 36)
texto_aumento = False
tempo_exibicao_texto = 60
verifica_texto_max = False
tempo_exibicao_texto_max = 120
contx = 0
# Botão de inicio
botao_x = 335
botao_y = 490
texto_x = 370
texto_y = 500
botao_x_direc = 0.06
botao_y_direc = 0.04
corb = (random.randint(0, 255), random.randint(0, 255), random.randint(0, 255))
cort = (random.randint(0, 255), random.randint(0, 255), random.randint(0, 255))
cor_bg = (random.randint(0, 255), random.randint(0, 255), random.randint(0, 255))
# Funções
def criar_cano():
    cano_x = LARGURA + distancia_canos * len(canos)
    cano_alt = random.randint(100, 400)
    canos.append([cano_x, cano_alt])
def criar_tela():
    tela.blit(imagem_fundo, (0, 0))
    topo = pygame.draw.rect(tela, VERDE, [0, 0, LARGURA, 5])
    botom = pygame.draw.rect(tela, VERDE, [0, ALTURA - 5, LARGURA, 5])
    return topo, botom
def criar_jogador():
    play = pygame.draw.rect(tela, 'yellow', (pos_x, pos_y, 30, 30), 0, 10)
    tela.blit(imagem_player, (pos_x - 10, pos_y - 15))
    return play
def criar_canos():
    for cano in canos:
        pygame.draw.rect(tela, 'dark green', (cano[0], 0, 70, cano[1]))
        pygame.draw.rect(tela, 'dark green', (cano[0], cano[1] + altura_canos, 70, ALTURA - cano[1] - altura_canos))
def verificar_colisao():
    for cano in canos:
        if pos_x + 30 > cano[0] and pos_x < cano[0] + 70:
            if pos_y < cano[1] or pos_y + 30 > cano[1] + altura_canos:
                return True
    return False
def verificar_colisao_chao(player, tops, bots):
    coll = [False, False]
    if player.colliderect(bots):
        coll[0] = True
    if player.colliderect(tops):
        coll[1] = True
    return coll
def desenhar_pause():
    tela.blit(imagem_pause, (0, 0))
    pygame.draw.rect(tela, 'dark gray', [100, 330, 600, 50], 0, 10)
    tela.blit(fonte.render('Aperte "esc" para retomar', True, 'black'), (220, 340))
    botao_restart = pygame.draw.rect(tela, 'white', [100, 270, 280, 50], 0, 10)
    tela.blit(fonte.render('Restart', True, 'black'), (200, 280))
    botao_quitar = pygame.draw.rect(tela, 'white', [420, 270, 280, 50], 0, 10)
    tela.blit(fonte.render('Quit', True, 'black'), (540, 280))
    tela.blit(superficie, (0, 0))
    return botao_restart, botao_quitar
def cria_tela_inicial():
    global botao_x, botao_y, texto_x, texto_y, corb, cort, cor_bg
    tela.blit(imagem_inicio, (0, 0))
    botao_start = pygame.draw.rect(tela, (*corb, 50), [botao_x, botao_y, 150, 50], 0, 10)
    tela.blit(fonte.render('Iniciar', True, (*cort, 50)), (texto_x, texto_y))
    return botao_start
def atualizar_posicao_botao():
    global botao_x, botao_y, texto_x, texto_y, botao_x_direc, botao_y_direc, cort, corb, cor_bg
    if botao_x_direc > 0:
        if botao_x < 650:
            botao_x += botao_x_direc
            texto_x += botao_x_direc
        else:
            botao_x_direc *= -1
            corb = (random.randint(125, 255), random.randint(125, 255), random.randint(125, 255))
            cort = (random.randint(0, 125), random.randint(0, 125), random.randint(0, 125))
            cor_bg = (random.randint(0, 255), random.randint(0, 255), random.randint(0, 255))
    elif botao_x_direc < 0:
        if botao_x > 10:
            botao_x += botao_x_direc
            texto_x += botao_x_direc
        else:
            botao_x_direc *= -1
            corb = (random.randint(125, 255), random.randint(125, 255), random.randint(125, 255))
            cort = (random.randint(0, 125), random.randint(0, 125), random.randint(0, 125))
            cor_bg = (random.randint(0, 255), random.randint(0, 255), random.randint(0, 255))
    if botao_y_direc > 0:
        if botao_y < 550:
            botao_y += botao_y_direc
            texto_y += botao_y_direc
        else:
            botao_y_direc *= -1
            corb = (random.randint(125, 255), random.randint(125, 255), random.randint(125, 255))
            cort = (random.randint(0, 125), random.randint(0, 125), random.randint(0, 125))
            cor_bg = (random.randint(0, 255), random.randint(0, 255), random.randint(0, 255))
    elif botao_y_direc < 0:
        if botao_y > 10:
            botao_y += botao_y_direc
            texto_y += botao_y_direc
        else:
            botao_y_direc *= -1
            corb = (random.randint(125, 255), random.randint(125, 255), random.randint(125, 255))
            cort = (random.randint(0, 125), random.randint(0, 125), random.randint(0, 125))
            cor_bg = (random.randint(0, 255), random.randint(0, 255), random.randint(0, 255))
def cria_tela_over():
    global pontuacao
    tela.blit(imagem_over, (0, 0))
    pygame.draw.rect(tela, 'black', [100, 350, 600, 50], 0, 10)
    tela.blit(fonte.render(f'VOCÊ PERDEU! | PONTUAÇÃO: {pontuacao}', True, 'red'), (200, 360))
    btn_restart = pygame.draw.rect(tela, 'black', [100, 420, 280, 50], 0, 10)
    tela.blit(fonte.render('Restart', True, 'white'), (200, 430))
    btn_quitar = pygame.draw.rect(tela, 'black', [420, 420, 280, 50], 0, 10)
    tela.blit(fonte.render('Quit', True, 'white'), (540, 430))
    tela.blit(superficie, (0, 0))
    return btn_restart, btn_quitar
# Relógio para controlar o FPS
relogio = pygame.time.Clock()
# Loop principal do jogo
rodando = True
while rodando:
    # Identificando eventos de tecla e mouse
    for evento in pygame.event.get():
        if evento.type == pygame.QUIT:
            rodando = False
        elif evento.type == pygame.KEYDOWN:
            if evento.key == pygame.K_ESCAPE:
                som_clique.play()
                if pause:
                    pause = False
                else:
                    pause = True
            if evento.key == pygame.K_SPACE:
                som_asa.play()
                velocidade_y = pulo
        elif evento.type == pygame.MOUSEBUTTONDOWN:
            if pause:
                if restart_b.collidepoint(evento.pos):
                    restart_cmd = True
                    som_clique.play()
                elif quitar.collidepoint(evento.pos):
                    rodando = False
                    som_clique.play()
            else:
                if btn_restart.collidepoint(evento.pos):
                    restart_cmd = True
                    som_clique.play()
                elif btn_quitar.collidepoint(evento.pos):
                    rodando = False
                    som_clique.play()
    # Adicionando tela de ínicio
    while not inicio:
        som_inicio.play()
        botao_start = cria_tela_inicial()
        atualizar_posicao_botao()
        pygame.display.update()
        for evento in pygame.event.get():
            if evento.type == pygame.MOUSEBUTTONDOWN and botao_start.collidepoint(evento.pos):
                inicio = True
                som_inicio.stop()
                som_clique.play()
                som_jogo.play()
    if not pause and not verificar_colisao():
        # Atualizar posição do pássaro
        velocidade_y += gravidade
        pos_y += velocidade_y
        # Atualizar posição dos canos
        for cano in canos:
            cano[0] -= velocidade_canos
            if cano[0] < -70:
                cano[0] = LARGURA + distancia_canos * (len(canos) - 1)
                cano[1] = random.randint(100, 400)
                pontuacao += 1
                # Aumentando velocidade dos canos
                cont_canos += 1
                if velocidade_canos < 17:
                    if cont_canos == 5:
                        velocidade_canos += 1
                        cont_canos = 0
                        texto_aumento = True
                        tempo_exibicao_texto = 60
                if velocidade_canos == 17 and contx == 0:
                    verifica_texto_max = True
                    tempo_exibicao_texto_max = 120
                    contx = 1
    if not verificar_colisao():
        # Criar novo cano
        criar_cano()
        # Redesenhar tudo
        top, bot = criar_tela()
        criar_canos()
        jogador = criar_jogador()
        texto_pontuacao = fonte.render(f"Score: {pontuacao}", True, (0, 0, 0))
        tela.blit(texto_pontuacao, (10, 10))
        texto_velocidade = fonte.render(f"Velocidade: {velocidade_canos - 4}", True, (0, 0, 0))
        tela.blit(texto_velocidade, (LARGURA - 200, 10))
    # Desenhando tela de pause
    if pause:
        restart_b, quitar = desenhar_pause()
    
    # Verificar colisões e gerando tela de morte
    if verificar_colisao() and cont_morte == 0:
        som_morte.play()
        btn_restart, btn_quitar = cria_tela_over()
        pygame.display.update()
        cont_morte = 1
    # Verificar colisões com o chão e teto
    colidindo = verificar_colisao_chao(jogador, top, bot)
    if (colidindo[0] and velocidade_y > 0):
        velocidade_y = 0
        pos_y -= gravidade
    if (colidindo[1] and velocidade_y < 0):
        velocidade_y = 0
        pos_y += gravidade
    # Mostrar texto de aumento de velocidade se necessário
    if texto_aumento:
        som_velo.play()
        texto_aumento_velocidade = fonte.render("AUMENTANDO VELOCIDADE", True, VERMELHO)
        tela.blit(texto_aumento_velocidade, (LARGURA / 2 - texto_aumento_velocidade.get_width() / 2, ALTURA / 2 - texto_aumento_velocidade.get_height() / 2))
        pygame.display.update()
        tempo_exibicao_texto -= 1
        if tempo_exibicao_texto <= 0:
            texto_aumento = False
    # Mostrar texto de velocidade máxima se necessário
    if verifica_texto_max:
        tempo_exibicao_texto_max -= 1
        if tempo_exibicao_texto_max <= 60:
            texto_maximo = fonte.render(f"VELOCIDADE MÁXIMA ATINGIDA!!!", True, VERMELHO)
            tela.blit(texto_maximo, (LARGURA / 2 - texto_aumento_velocidade.get_width() / 2, ALTURA / 2 - texto_aumento_velocidade.get_height() / 2))
            pygame.display.update()
            if tempo_exibicao_texto_max <= 0:
                verifica_texto_max = False
    # Reiniciando para parâmetros iniciais em caso de botão restart
    if restart_cmd:
        pause = False
        restart_cmd = False
        pos_x = 50
        pos_y = 300
        velocidade_y = 0
        velocidade_canos = 5
        canos = []
        cont_canos = 0
        pontuacao = 0
        contx = 0
        tempo_exibicao_texto = 60
        verifica_texto_max = False
        tempo_exibicao_texto_max = 120
        cont_morte = 0
    pygame.display.update()
    relogio.tick(FPS)

# Encerrando biblioteca
pygame.quit()
